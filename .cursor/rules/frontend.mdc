---
description: フロントエンド開発ガイド
globs: frontend/**/*
alwaysApply: true
---
# フロントエンド開発ガイド

このルールを読んだら「フロントエンド開発ガイドを読みました！」と言ってください。

## 1. 設定

### 1.1 フレームワーク
- Next.js 15 (App Router)
- React 19
- TypeScript 5

### 1.2 スタイリング
- Tailwind CSS
- shadcn/ui
- CSS Modules (必要に応じて)

### 1.3 状態管理
- React Server Components
- React Hooks
- Zustand (必要に応じて)

### 1.4 データフェッチング
- React Server Actions
- SWR (必要に応じて)

## 2. ディレクトリ構造

```
frontend/
├── src/
│   ├── app/                 # ページコンポーネント
│   ├── components/          # 再利用可能なUIコンポーネント
│   │   ├── ui/             # 基本UIコンポーネント
│   │   └── layout/         # レイアウトコンポーネント
│   ├── features/           # 機能単位のコンポーネント
│   ├── lib/                # ユーティリティ関数
│   ├── types/              # 型定義
│   └── styles/             # グローバルスタイル
```

### 2.1 コンポーネント設計思想

#### components ディレクトリ
- 再利用可能な基本的なUI部品を配置
- 特定のビジネスロジックに依存しない
- プレゼンテーショナルコンポーネントとして実装
- 例：ボタン、フォーム、カード、モーダルなど

#### features ディレクトリ
- 特定の機能に関連するコンポーネントを配置
- **Container/Presentationalパターン**を必須で採用
- **コロケーション**: 関連するすべてのファイルを機能単位でディレクトリに集約
- 例：画像アップロード、検索結果表示など

#### Container/Presentationalパターン（必須）

**全てのfeature機能はContainer/Presentationalパターンで実装すること**

**重要**: Client ComponentからServer Componentを呼び出すことは不可能です
- **禁止**: Presentationalコンポーネント（Client Component）からContainerコンポーネント（Server Component）を呼び出すこと
- **必須**: Containerコンポーネント（Server Component）から他のContainerコンポーネント（Server Component）を呼び出すこと
- **理由**: React Server Componentsの制約により、Client ComponentからServer Componentを直接呼び出すことはできません

```
features/
├── products/                 # 商品表示機能
│   ├── containers/           # Containerコンポーネント
│   │   └── ProductsContainer.tsx    # データ取得・ビジネスロジック（Server Component）
│   ├── presentations/        # Presentationalコンポーネント
│   │   └── ProductsListPresentation.tsx  # UI表示専用（Client Component）
│   ├── api.ts               # API呼び出し関数
│   ├── types.ts             # 型定義
│   └── utils.ts             # ユーティリティ関数
├── actress-detail/          # 女優詳細機能
│   ├── containers/
│   │   └── ActressDetailContainer.tsx
│   ├── presentations/
│   │   └── ActressDetailPresentation.tsx
│   ├── api.ts
│   └── types.ts
```

**Containerコンポーネント（Server Component）:**
- データ取得・ビジネスロジックを担当
- APIリクエストを実行
- エラーハンドリングを行う
- Presentationalコンポーネントにpropsを渡す
- **他のContainerコンポーネントを呼び出すことが可能**
- 必ずServer Componentとして実装
- ファイル名: `*Container.tsx`

**Presentationalコンポーネント（Client Component）:**
- UIの表示のみを担当
- propsとして受け取ったデータを表示
- ユーザーインタラクションを処理
- **他のContainerコンポーネントを呼び出すことは禁止**
- 必要に応じてClient Componentとして実装
- ファイル名: `*Presentation.tsx`

#### 実装パターン

```typescript
// containers/ProductsContainer.tsx
export default async function ProductsContainer({ personId, limit = 10 }: Props) {
  try {
    // データ取得
    const productsData = await getProductsByPersonId(personId, limit);

    // Presentationalコンポーネントに渡す
    return (
      <ProductsListPresentation
        productsData={productsData}
        className={className}
      />
    );
  } catch (error) {
    // エラー状態を渡す
    return (
      <ProductsListPresentation
        productsData={null}
        className={className}
        error="データ取得に失敗しました"
      />
    );
  }
}

// presentations/ProductsListPresentation.tsx
export function ProductsListPresentation({ productsData, error }: Props) {
  if (error) {
    return <ErrorMessage message={error} />;
  }

  if (!productsData) {
    return <NoDataMessage />;
  }

  return (
    <div>
      {/* UI表示 */}
    </div>
  );
}
```

#### ContainerからContainerを呼び出すパターン

```typescript
// containers/SearchResultsContainer.tsx
import ProductsContainer from "@/features/products/containers/ProductsContainer";

export default async function SearchResultsContainer({ sessionId }: Props) {
  try {
    // データ取得
    const sessionData = await getSearchSessionResults(sessionId);
    const formattedResults = formatSearchResults(sessionData.results);

    // Presentationalコンポーネントと他のContainerコンポーネントを呼び出す
    return (
      <>
        <SearchResultsPresentation
          sessionData={sessionData}
          formattedResults={formattedResults}
          error={null}
        />
        {/* 関連商品エリア - ContainerからContainerを呼び出し */}
        {formattedResults[0]?.id && (
          <div className="mb-8">
            <ProductsContainer personId={formattedResults[0].id} limit={6} />
          </div>
        )}
      </>
    );
  } catch (error) {
    return (
      <SearchResultsPresentation
        sessionData={null}
        formattedResults={null}
        error="データ取得に失敗しました"
      />
    );
  }
}
```

#### appディレクトリからの使用方法

**重要**: Barrel Exports（index.ts）は使用禁止。直接パスを指定してimportすること。

```typescript
// app/actress/[person_id]/page.tsx
import ActressDetailContainer from "@/features/actress-detail/containers/ActressDetailContainer";

export default async function ActressDetailPage({ params }: Props) {
  const { person_id } = await params;
  const personId = Number.parseInt(person_id);

  // Containerコンポーネントを呼び出すだけ
  return <ActressDetailContainer personId={personId} />;
}
```

#### Import方針

**禁止**: Barrel Exports（index.ts）の使用
```typescript
// ❌ 禁止
import { ActressDetailContainer } from "@/features/actress-detail";
import { ProductsContainer } from "@/features/products";
```

**推奨**: 直接パスでのImport
```typescript
// ✅ 推奨
import ActressDetailContainer from "@/features/actress-detail/containers/ActressDetailContainer";
import ProductsContainer from "@/features/products/containers/ProductsContainer";
import { getProductsByPersonId } from "@/features/products/api";
import type { DmmProduct } from "@/features/products/types";
```

**理由**:
- バンドルサイズの最適化
- 依存関係の明確化
- Tree Shakingの効果向上
- 循環依存の回避

**Container/Presentationalパターンの利点:**
- 関心の分離が明確
- テストが容易
- 再利用しやすい
- メンテナンス性が向上
- データ取得とUI表示が独立

**コロケーションの利点:**
- 機能に関連するコードがすべて1箇所に集約される
- 変更時の影響範囲が明確
- 機能単位でのテストが容易
- 新しい開発者にとって理解しやすい構造

## 3. データ通信方針

### 3.1 取得系コンポーネント（React Server Components）
**基本方針**: 取得系はReact Server Componentを使用し、Next.jsサーバーからPythonサーバーに通信する

- **禁止**: ブラウザから直接Pythonサーバーに通信することは禁止
- **必須**: React Server ComponentでfetchしてSSRで表示
- **API URL**: Docker内部ネットワーク（`http://backend:10000`）を使用
- **キャッシュ**: 必要に応じて`cache: "no-store"`や`revalidate`を設定

#### 実装パターン
```typescript
// features/ranking/api.ts
export async function getRankingData(): Promise<RankingResponse | null> {
  try {
    // 環境変数からAPI URLを取得（デプロイ環境とローカル環境で異なる）
    const API_BASE_URL = process.env.API_BASE_URL || "http://backend:10000";
    const response = await fetch(`${API_BASE_URL}/api/ranking?limit=5`, {
      cache: "no-store", // リアルタイムデータの場合
    });

    if (!response.ok) {
      console.error("Failed to fetch ranking data:", response.status);
      return null;
    }

    return await response.json();
  } catch (error) {
    console.error("Error fetching ranking data:", error);
    return null;
  }
}

// features/ranking/SearchRanking.tsx
export default async function SearchRanking() {
  const rankingData = await getRankingData();

  if (!rankingData) {
    return <ErrorFallback />;
  }

  return <RankingDisplay data={rankingData} />;
}
```

### 3.2 変更系コンポーネント（Server Actions）
- データの変更はサーバーアクションで実装
- クライアントコンポーネントから直接呼び出し
- エラーハンドリングは統一的な方法で実装

### 3.3 通信方式の使い分け

#### Server Components（取得系）
- **用途**: データ取得・表示
- **通信**: Next.jsサーバー ↔ Pythonサーバー
- **URL**: `http://backend:10000`（Docker内部）
- **例**: ランキング表示、検索結果表示、プロフィール表示

#### Server Actions（変更系）
- **用途**: データ変更・操作
- **通信**: ブラウザ → Next.jsサーバー → Pythonサーバー
- **URL**: `http://backend:10000`（Docker内部）
- **例**: 画像アップロード、検索実行、データ更新

#### Client Components
- **用途**: インタラクティブなUI
- **制限**: 直接APIアクセス禁止
- **例**: フォーム操作、ドラッグ&ドロップ、状態管理

## 4. 環境変数

### 4.1 必要な環境変数
- `API_BASE_URL`: PythonサーバーのベースURL（Server Component用）

## 5. パフォーマンス最適化

### 5.1 画像最適化
- Next.jsの画像最適化機能を活用
- 適切なサイズとフォーマットの使用
- 遅延読み込みの実装

### 5.2 バンドルサイズ
- 動的インポートの活用
- 不要な依存関係の削除
- コード分割の最適化

## 6. エラーハンドリング

### 6.1 基本方針
- ユーザーフレンドリーなエラーメッセージ
- 適切なフォールバックUI
- エラー状態の視覚的フィードバック

### 6.2 実装方法
- try-catchによるエラー捕捉
- エラーバウンダリの活用
- トースト通知によるフィードバック

## 7. ログ出力方針

### 7.1 基本方針
**禁止**: `console.log`, `console.error`等の直接使用は禁止
**必須**: `@/lib/logger`を使用した統一的なログ出力

### 7.2 ログレベル
- **debug**: 開発時のデバッグ情報
- **info**: 正常な処理の記録
- **warn**: 警告レベルの問題
- **error**: エラー情報

### 7.3 実装パターン

#### 機能単位でのLogger作成
```typescript
// features/search-results/api.ts
import { createLogger } from "@/lib/logger";

const logger = createLogger("SearchResults");

export async function getSearchSessionResults(sessionId: string) {
  try {
    logger.info("検索セッション結果を取得開始", { sessionId });

    const response = await fetch(url);

    if (!response.ok) {
      logger.error("APIリクエストが失敗", {
        sessionId,
        status: response.status,
        statusText: response.statusText,
      });
      return null;
    }

    logger.info("検索セッション結果の取得に成功", {
      sessionId,
      resultCount: data.results?.length || 0,
    });

    return data;
  } catch (error) {
    logger.error("処理中にエラーが発生", { sessionId, error });
    return null;
  }
}
```

#### Server Actions内でのLogger使用
```typescript
// actions/search/search.ts
import { logger } from "@/lib/logger";

export async function searchImage(formData: FormData) {
  try {
    logger.info("画像検索を開始", {
      fileName: image.name,
      fileSize: image.size,
    });

    const result = await fetch(url, options);

    logger.info("画像検索成功", {
      resultsCount: data.results?.length,
      processingTime: data.processing_time,
    });

    return result;
  } catch (error) {
    logger.error("検索処理中にエラー", { error });
    throw error;
  }
}
```

### 7.4 ログ出力の統一ルール
- **構造化ログ**: オブジェクト形式でコンテキスト情報を含める
- **日本語メッセージ**: ユーザー向けメッセージは日本語で記述
- **機能単位プレフィックス**: `createLogger("機能名")`で識別
- **環境別レベル**: 本番環境では`info`以上、開発環境では`debug`以上

## 8. テスト方針

### 8.1 基本方針
**必須**: `features`ディレクトリ内の機能は**統合テスト**を実装すること
**禁止**: 細かい単位でのユニットテストは行わない

### 8.2 統合テストの指針

#### featuresディレクトリのテスト対象
- **Container/Presentationalパターン**の完全なフロー
- **API関数 → Presentationコンポーネント**の統合動作
- **エラーハンドリング**を含む実際の使用フローの検証

#### テスト実装パターン

**MSWによるリアルなAPI モック原則**:
- **MSW必須**: Mock Service Worker (MSW) を使用してAPIレスポンスをモック
- **必要最小限のモック**: Next.js routerのみモック、fetchは実際のHTTPリクエストをMSWでインターセプト
- **コンポーネント内部のモック禁止**: Containerコンポーネント内部のロジックはモックしない

```typescript
// features/actress-list/actress-list.test.tsx
import { server } from '@/test/mocks/server';
import { http, HttpResponse } from 'msw';

describe('ActressList Feature Integration Tests', () => {
  it('Container → API → Presentation の完全な統合フロー', async () => {
    // 1. API関数を直接呼び出してテスト（MSWがレスポンスを提供）
    const { getActressList } = await import('./api');
    const { ActressListPresentation } = await import('./presentations/ActressListPresentation');
    
    const result = await getActressList();
    
    // 2. API結果の検証（MSWが提供したデータ）
    expect(result).toEqual({
      persons: [
        { person_id: 1, name: 'AIKA', image_path: '...', dmm_actress_id: 1008887 },
        // ... MSWハンドラーで定義されたデータ
      ],
      total_count: 13010,
      has_more: true,
    });

    // 3. Presentation Component で結果を表示
    render(
      <ActressListPresentation 
        actresses={result?.persons || []}
        totalCount={result?.total_count || 0}
        currentPage={1}
        itemsPerPage={20}
        searchQuery=""
        sortBy="name"
        isLoading={false}
        error={null}
      />
    );

    // 4. UIが正しく表示されることを確認
    expect(screen.getByText('女優一覧')).toBeInTheDocument();
    expect(screen.getByText('AIKA')).toBeInTheDocument();
  });

  it('APIエラー時のエラーハンドリング', async () => {
    // MSWでエラーレスポンスを一時的にオーバーライド
    server.use(
      http.get('http://backend:10000/api/persons', () => {
        return HttpResponse.json(
          { error: 'Internal Server Error' },
          { status: 500 }
        );
      })
    );

    const { getActressList } = await import('./api');
    const result = await getActressList();

    // エラー時の適切な処理確認
    expect(result).toBeNull();
  });
});
```

#### テストファイル配置
- **コロケーション**: 機能ディレクトリ内に配置
- **命名規則**: `*.test.tsx` または `*.test.ts`
- **例**: `features/actress-list/actress-list.test.tsx`

#### 統合テストの利点
- **実際の使用フローの検証**: ユーザーが実際に体験する流れをテスト
- **Container/Presentationalパターンの検証**: アーキテクチャが正しく動作することを確認
- **実際のHTTP通信の検証**: MSWによりブラウザ環境に近いAPIリクエスト・レスポンスをテスト
- **リアルなエラーハンドリングの検証**: 実際のHTTPエラーレスポンスでの動作確認

#### MSW使用の利点
- **ブラウザ環境に近いテスト**: 実際のfetchAPIを使用してHTTPリクエストをインターセプト
- **型安全性**: TypeScriptでAPIレスポンスの型定義が可能
- **動的レスポンス**: リクエストパラメータに応じて動的にレスポンスを生成
- **エラーシナリオの再現**: 様々なHTTPエラーステータスやネットワークエラーを簡単に再現
- **開発者体験**: ブラウザの開発者ツールでネットワークタブにリクエストが表示される

### 8.3 テスト必須シナリオ

#### 基本動作テスト
1. **正常フロー**: データ取得 → 表示の基本動作
2. **検索機能**: パラメータ付きでのAPI呼び出しと結果表示
3. **ページネーション**: オフセット計算とページ遷移
4. **ソート機能**: ソートパラメータの送信と結果表示

#### エラーハンドリングテスト
1. **APIエラー**: サーバーエラー時の適切なエラー表示
2. **ネットワークエラー**: 通信失敗時のフォールバック
3. **空データ**: データが存在しない場合の表示
4. **パラメータエラー**: 不正なパラメータでのAPI呼び出し

### 8.4 テストで避けるべきパターン

#### ❌ 避けるべきテスト
```typescript
// ❌ 過度に細かいユニットテスト
it('API関数が正しいURLを構築する', () => {
  // API内部実装の詳細テスト
});

// ❌ コンポーネント内部のステート管理テスト
it('ローカルステートが正しく更新される', () => {
  // useState内部の詳細テスト
});
```

#### ✅ 推奨するテスト
```typescript
// ✅ 機能レベルの統合テスト
it('検索機能の完全なフロー', async () => {
  // 検索実行 → API呼び出し → 結果表示の一連のフロー
});

// ✅ エラーシナリオの統合テスト
it('APIエラー時のユーザー体験', async () => {
  // エラー発生 → エラー表示 → ユーザーへのフィードバック
});
```

### 8.5 テストコマンド

#### 開発時のテスト実行
```bash
# 特定の機能のテスト実行
docker-compose exec frontend npm run test -- actress-list.test.tsx

# テスト全体の実行
docker-compose exec frontend npm run test

# テストカバレッジ確認
docker-compose exec frontend npm run test:coverage
```

#### CI/CDでのテスト実行
- **必須**: 全ての統合テストがパスすること
- **品質ゲート**: テスト失敗時はマージブロック
- **パフォーマンス**: テスト実行時間の監視
