# 回答の正確性

回答の正確性を保つために、以下ルールを必ず守ってください。

- 存在しない関数やメソッド、APIを作らないでください。必ず公式ドキュメントに基づいてください。
- 不確かな情報は推測せず、「わかりません」と答えてください。
- ライブラリやフレームワークの型、パラメータ、使い方をでたらめに書かないでください。
- 外部ライブラリや関数を引用する場合は、公式ドキュメントや信頼できる情報源に基づいてください。
- 生成するコードは、実行可能で構文的に正しいことを確認してください。
- 質問の内容にあいまいさがある場合は、勝手に解釈せず、確認を求めてください。
- ライブラリやフレームワークの挙動を作り出さないでください。公式な動作や一般的なベストプラクティスに従ってください。
- APIのレスポンスや構造を勝手に作らないでください。仮の例である場合は、その旨を明記してください。

# .cursorrulesの更新

- .cursourrulesにはプロジェクト概要、要件、仕様、アーキテクチャ内容を記載する
- やり取りする中で内容を変更した場合は.cursorrulesを更新すること

# SearchFace プロジェクト設定

## プロジェクト概要
- プロジェクト名: SearchFace
- 目的: 顔画像の類似度検索システム
- 主要技術: Python, FAISS, SQLite, face_recognition

## 開発環境
- Python: 3.8以上
- 依存関係管理: pyproject.toml

## ディレクトリ構成
```
SearchFace/
├── .cursorrules          # プロジェクト設定
├── pyproject.toml        # Poetry設定ファイル
├── poetry.lock          # 依存関係ロックファイル
├── data/                 # データディレクトリ
│   ├── images/          # 顔画像保存用
│   ├── face_database.db # SQLiteデータベース
│   └── face.index       # FAISSインデックス
├── src/                 # ソースコード
│   ├── database/        # データベース関連
│   │   ├── __init__.py
│   │   ├── face_database.py  # 顔データベース管理
│   │   └── db_utils.py       # データベースユーティリティ
│   ├── face/           # 顔認識関連
│   │   ├── __init__.py
│   │   ├── face_comparison.py # 顔比較処理
│   │   └── face_utils.py      # 顔認識ユーティリティ
│   ├── utils/          # 共通ユーティリティ
│   │   ├── __init__.py
│   │   └── similarity.py      # 類似度計算
│   └── main.py         # メインスクリプト
└── docs/               # ドキュメント
    ├── design.md      # 設計資料
    └── api.md         # API仕様
```

## データベース設定
- データベースファイル: data/face_database.db
- テーブル構造:
  ```sql
  CREATE TABLE faces (
      face_id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      image_path TEXT NOT NULL,
      index_position INTEGER NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      metadata TEXT
  );
  ```

## 顔データ管理ルール
- 1人につき複数枚の画像を登録可能
- 画像ファイル形式: .jpg, .jpeg, .png
- 画像ファイル名: 人物名.jpg
- メタデータ: JSON形式で保存
- 同一画像の重複登録は防止

## 類似度検索設定
- 検索結果数: デフォルト5件
- 類似度計算方法: 距離ベース
- 閾値設定:
  - 距離0.4以上: 異なる人物の可能性が高い（50%未満）
  - 距離0.6以上: ほぼ確実に異なる人物（0%）

## 開発ルール
- コードスタイル: PEP 8準拠
- 型ヒント: 必須
- ドキュメント: 日本語で記述
- エラーハンドリング: 適切な例外処理

## デバッグ設定
- ログレベル: INFO
- デバッグ出力: 検索結果の詳細表示
- エラーメッセージ: 日本語で表示

## 運用ルール
- データベースバックアップ: 定期的に実施
- インデックス再構築: 必要に応じて実施
- エラー発生時: ログを確認し、適切な対応を実施

## 注意事項
- 顔データの取り扱いには注意が必要
- プライバシー保護に配慮
- データベースの整合性を維持
- パフォーマンスに注意（大量データ処理時）

## インデックス管理の実装方針
### 基本方針
- FAISSインデックスとSQLiteデータベースの2つのデータストアを使用
- インデックス位置で両者を紐付ける
- トランザクション管理による整合性の確保
- 1人の人物に対して複数の顔画像を登録可能（一対多の関係）
- 同一画像の重複登録は防止

### 整合性管理
- トランザクションによる原子性の確保
- 画像パスによる重複チェック
- 整合性チェックは行わない（将来的なデータ量増加と一対多の関係を考慮）

### エラーハンドリング
- 例外処理の徹底
- ロールバック処理の確実な実行
- エラーメッセージの明確な出力

### バックアップと復元
- 定期的なデータベースバックアップ
- インデックスファイルのバックアップ
- 整合性を保った復元手順の整備

### パフォーマンス考慮事項
- インデックスのメモリ使用量の監視
- 大量データ処理時の最適化
- 検索パフォーマンスの維持
- 一対多の関係を考慮したインデックス設計