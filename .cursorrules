# 回答の正確性

回答の正確性を保つために、以下ルールを必ず守ってください。

- 存在しない関数やメソッド、APIを作らないでください。必ず公式ドキュメントに基づいてください。
- 不確かな情報は推測せず、「わかりません」と答えてください。
- ライブラリやフレームワークの型、パラメータ、使い方をでたらめに書かないでください。
- 外部ライブラリや関数を引用する場合は、公式ドキュメントや信頼できる情報源に基づいてください。
- 生成するコードは、実行可能で構文的に正しいことを確認してください。
- 質問の内容にあいまいさがある場合は、勝手に解釈せず、確認を求めてください。
- ライブラリやフレームワークの挙動を作り出さないでください。公式な動作や一般的なベストプラクティスに従ってください。
- APIのレスポンスや構造を勝手に作らないでください。仮の例である場合は、その旨を明記してください。

# SearchFace プロジェクト設定

## プロジェクト概要
- プロジェクト名: SearchFace
- 目的: 顔画像の類似度検索システム
- 主要技術: Python, FAISS, SQLite, face_recognition

## ディレクトリ構成
```
SearchFace/
├── .cursorrules          # プロジェクト設定
├── data/                 # データディレクトリ
│   ├── images/          # 顔画像保存用
│   ├── face_database.db # SQLiteデータベース
│   └── face.index       # FAISSインデックス
├── src/                 # ソースコード
│   ├── database/        # データベース関連
│   │   ├── __init__.py
│   │   ├── face_database.py  # 顔データベース管理
│   │   └── db_utils.py       # データベースユーティリティ
│   ├── face/           # 顔認識関連
│   │   ├── __init__.py
│   │   ├── face_comparison.py # 顔比較処理
│   │   └── face_utils.py      # 顔認識ユーティリティ
│   ├── utils/          # 共通ユーティリティ
│   │   ├── __init__.py
│   │   └── similarity.py      # 類似度計算
│   └── main.py         # メインスクリプト
└── docs/               # ドキュメント
    ├── design.md      # 設計資料
    └── api.md         # API仕様
```

## データベース設定
- データベースファイル: data/face_database.db
- テーブル構造:
  ```sql
  CREATE TABLE faces (
      face_id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      image_path TEXT NOT NULL,
      index_position INTEGER NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      metadata TEXT
  );
  ```

## 顔データ管理ルール
- 1人につき1枚の画像のみ登録可能
- 画像ファイル形式: .jpg, .jpeg, .png
- 画像ファイル名: 人物名.jpg
- メタデータ: JSON形式で保存

## 類似度検索設定
- 検索結果数: デフォルト5件
- 類似度計算方法: 距離ベース
- 閾値設定:
  - 距離0.4以上: 異なる人物の可能性が高い（50%未満）
  - 距離0.6以上: ほぼ確実に異なる人物（0%）

## 開発ルール
- コードスタイル: PEP 8準拠
- 型ヒント: 必須
- ドキュメント: 日本語で記述
- エラーハンドリング: 適切な例外処理

## デバッグ設定
- ログレベル: INFO
- デバッグ出力: 検索結果の詳細表示
- エラーメッセージ: 日本語で表示

## 運用ルール
- データベースバックアップ: 定期的に実施
- インデックス再構築: 必要に応じて実施
- エラー発生時: ログを確認し、適切な対応を実施

## 注意事項
- 顔データの取り扱いには注意が必要
- プライバシー保護に配慮
- データベースの整合性を維持
- パフォーマンスに注意（大量データ処理時）

## 設定ファイル更新ルール
### 更新タイミング
- 仕様変更が発生した時
- アーキテクチャの変更があった時
- 要件が追加・変更された時
- 運用ルールが変更された時

### 更新内容
- 変更内容の明確な記述
- 変更理由の記載
- 変更日時の記録
- 影響範囲の特定

### 更新手順
1. 変更内容の確認
2. 関連するセクションの特定
3. 変更内容の反映
4. 変更履歴の記録

### 変更履歴の記録形式
```markdown
## 変更履歴
### YYYY-MM-DD
- 変更内容: [変更の概要]
- 変更理由: [変更が必要となった理由]
- 影響範囲: [影響を受ける機能やファイル]
- 担当者: [変更を実施した担当者]
```

### レビュー
- 変更内容は必ずレビューを受けること
- レビュー担当者は変更内容を確認し、承認すること
- レビュー結果は変更履歴に記録すること 